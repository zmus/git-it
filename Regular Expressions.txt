Validations: phone, email, passwords, domain names
Searching: words, unwanted chars, extracting sections, replace/clean/format

--------------------------------------------------------------------------------
                              Character set []
--------------------------------------------------------------------------------

  Represents 1 character
  Rules can be combined - ordering is irrelevant    #

[] = character set

- = range

^ = NOT the following character(s)

{,}
  = interval 
  * {2}   = exactly 2 times 
  * {2,5} 2 <= n <= 5
  * {2,}  n >= 2

/[a-z]+/      
  = word - lowercase
  = /[a-z][a-z][a-z].../

/[a-z]+/i   
  = word - case insensitive
  = /[A-Za-z]+/

/[\w\s]+/i 
  = words with spaces
  = /[a-z\s]+/i
  * [a-z\s] = [\sa-z]+     # 

/\b[^aeiou\s]+\b/
  = strings without vowels, excluding whitespace
  * "And the kitten was like: /prrrrrrrrr./"

/^\D+$/i
  = not a number
  = /^[^\d]+$/i 

/[a-z]{2}/
  = character [a-z] exactly 2 times

/\D{20,40}/i
  = between 20 and 40 not-a-number characters


--------------------------------------------------------------------------------
                                 Group ()
--------------------------------------------------------------------------------

() 
  = capturing group
  * returns match

(?:)
  = non-capturing group
  * if we don't want the result to be returned

33 Kiepach Lane, New York, NY 75757

/(^(\d+\s[\w\s]+(?:street|lane)),\s([\w\s]+),\s(\w{2})\s(\d{5}))$/i

returns:
  1. 33 Kiepach Lane
  2. New York
  3. NY
  4. 75757

--------------------------------------------------------------------------------
                               Metacharacters
--------------------------------------------------------------------------------

\s  
  = whitespace 
  * can include: spaces, tabs, new lines
  * using literal space is allowed, but hard to read

\w  
  = word
  = [a-zA-Z0-9]
  * includes underscore

\d
  = digit

You don't need a character set for negated shorthand characters:

\S = [^\s]   
\W = [^\w] 
\D = [^\d] = [^0-9] = not a number

--------------------------------------------------------------------------------
                                  Anchors  
--------------------------------------------------------------------------------

^ 
  = match if no characters before
  * in character set [] = NOT

$ 
  = match if no characters after

/^facebook/i
  * "/Facebook/ is." 
  * "What is facebook." NO MATCH

\b
  = word-boundary 
  = whole words only
  * /\b\w+\b/g = words surounded by boundary |learn||by||doing|
  * /\b(ok(ay)?|sure)\b/ -> group multiple patterns
  
--------------------------------------------------------------------------------
                                   Other
--------------------------------------------------------------------------------

+
  = match previous character 1 or more times - "quantifier"
  * /ar+/ = ar | arr | arrr | ...  

*
  = any character except newline - "wildcard"

? 
  = preceeding character or group is optional
  * /pirate\s(ship)?/
  * /y(es)?/i

|
  = OR

--------------------------------------------------------------------------------
                                  Escaping
--------------------------------------------------------------------------------

\/ \. \+ \? \$ \^

--------------------------------------------------------------------------------
                                  Modifiers
--------------------------------------------------------------------------------

  - letters after final slash
  - language specific !!!
  
i 
  = case insensitive

g
  = global
  = match all instances (not just the 1st)

m
  = multiline

/^\w+\s(penguin|albatross)$/mig

  "/King penguin/ 
  /Emperor penguin/
  /Wandering albatross/
  Weddell seal
  Narwhal"

  => ^ and $ are looked for on each line

/^(new|south)?\s?\w+$/mig

  "/Alabama/
   /Florida/
   /New York/
   /South Dakota/"



                               ~ Examples ~

--------------------------------------------------------------------------------
  Email
--------------------------------------------------------------------------------

name@domain.com

/^\w+@\w+\.(com|net|org|edu)$/i

--------------------------------------------------------------------------------
  Twitter URL
--------------------------------------------------------------------------------

http://www.twitter.com/username
https://twitter.com/username

/https?:\/\/(www\.)?twitter\.com\/\w+/

--------------------------------------------------------------------------------
  Price
--------------------------------------------------------------------------------

$100.00

\$[0-9]+\.[0-9][0-9]\

--------------------------------------------------------------------------------
  Coordinates
--------------------------------------------------------------------------------

/-?\d{1,3}\.\d{1,}/g

  /-43.183728/    
  /167.870653/

/^-?\d{1,3}\.\d{1,}$/g

  -43.183728  
  167.870653

/^-?\d{1,3}\.\d{1,}$/mg     GREAT

  /-43.183728/  
  /167.870653/

--------------------------------------------------------------------------------
  Phone number
--------------------------------------------------------------------------------

var str = "098-555-1212"

3 numbers, have to be 098 or 091 
+ dash or empty string
+ 3 numbers
+ dash or empty string
+ 4 numbers

if (str.match(/(091|098)-?\d{3}-?\d{4}/))